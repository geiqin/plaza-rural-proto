// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ecologyPolicyService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EcologyPolicyService service

func NewEcologyPolicyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EcologyPolicyService service

type EcologyPolicyService interface {
	//创建落实生态补助政策
	Create(ctx context.Context, in *EcologyPolicy, opts ...client.CallOption) (*EcologyPolicyResponse, error)
	// 编辑落实生态补助政策
	Update(ctx context.Context, in *EcologyPolicy, opts ...client.CallOption) (*EcologyPolicyResponse, error)
	// 删除落实生态补助政策
	Delete(ctx context.Context, in *EcologyPolicy, opts ...client.CallOption) (*EcologyPolicyResponse, error)
	// 获取落实生态补助政策详情
	Get(ctx context.Context, in *EcologyPolicy, opts ...client.CallOption) (*EcologyPolicyResponse, error)
	//分页查询落实生态补助政策列表
	Search(ctx context.Context, in *EcologyPolicyRequest, opts ...client.CallOption) (*EcologyPolicyResponse, error)
	//导出落实生态补助政策
	Export(ctx context.Context, in *EcologyPolicyRequest, opts ...client.CallOption) (*EcologyPolicyResponse, error)
}

type ecologyPolicyService struct {
	c    client.Client
	name string
}

func NewEcologyPolicyService(name string, c client.Client) EcologyPolicyService {
	return &ecologyPolicyService{
		c:    c,
		name: name,
	}
}

func (c *ecologyPolicyService) Create(ctx context.Context, in *EcologyPolicy, opts ...client.CallOption) (*EcologyPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "EcologyPolicyService.Create", in)
	out := new(EcologyPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecologyPolicyService) Update(ctx context.Context, in *EcologyPolicy, opts ...client.CallOption) (*EcologyPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "EcologyPolicyService.Update", in)
	out := new(EcologyPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecologyPolicyService) Delete(ctx context.Context, in *EcologyPolicy, opts ...client.CallOption) (*EcologyPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "EcologyPolicyService.Delete", in)
	out := new(EcologyPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecologyPolicyService) Get(ctx context.Context, in *EcologyPolicy, opts ...client.CallOption) (*EcologyPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "EcologyPolicyService.Get", in)
	out := new(EcologyPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecologyPolicyService) Search(ctx context.Context, in *EcologyPolicyRequest, opts ...client.CallOption) (*EcologyPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "EcologyPolicyService.Search", in)
	out := new(EcologyPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecologyPolicyService) Export(ctx context.Context, in *EcologyPolicyRequest, opts ...client.CallOption) (*EcologyPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "EcologyPolicyService.Export", in)
	out := new(EcologyPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EcologyPolicyService service

type EcologyPolicyServiceHandler interface {
	//创建落实生态补助政策
	Create(context.Context, *EcologyPolicy, *EcologyPolicyResponse) error
	// 编辑落实生态补助政策
	Update(context.Context, *EcologyPolicy, *EcologyPolicyResponse) error
	// 删除落实生态补助政策
	Delete(context.Context, *EcologyPolicy, *EcologyPolicyResponse) error
	// 获取落实生态补助政策详情
	Get(context.Context, *EcologyPolicy, *EcologyPolicyResponse) error
	//分页查询落实生态补助政策列表
	Search(context.Context, *EcologyPolicyRequest, *EcologyPolicyResponse) error
	//导出落实生态补助政策
	Export(context.Context, *EcologyPolicyRequest, *EcologyPolicyResponse) error
}

func RegisterEcologyPolicyServiceHandler(s server.Server, hdlr EcologyPolicyServiceHandler, opts ...server.HandlerOption) error {
	type ecologyPolicyService interface {
		Create(ctx context.Context, in *EcologyPolicy, out *EcologyPolicyResponse) error
		Update(ctx context.Context, in *EcologyPolicy, out *EcologyPolicyResponse) error
		Delete(ctx context.Context, in *EcologyPolicy, out *EcologyPolicyResponse) error
		Get(ctx context.Context, in *EcologyPolicy, out *EcologyPolicyResponse) error
		Search(ctx context.Context, in *EcologyPolicyRequest, out *EcologyPolicyResponse) error
		Export(ctx context.Context, in *EcologyPolicyRequest, out *EcologyPolicyResponse) error
	}
	type EcologyPolicyService struct {
		ecologyPolicyService
	}
	h := &ecologyPolicyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EcologyPolicyService{h}, opts...))
}

type ecologyPolicyServiceHandler struct {
	EcologyPolicyServiceHandler
}

func (h *ecologyPolicyServiceHandler) Create(ctx context.Context, in *EcologyPolicy, out *EcologyPolicyResponse) error {
	return h.EcologyPolicyServiceHandler.Create(ctx, in, out)
}

func (h *ecologyPolicyServiceHandler) Update(ctx context.Context, in *EcologyPolicy, out *EcologyPolicyResponse) error {
	return h.EcologyPolicyServiceHandler.Update(ctx, in, out)
}

func (h *ecologyPolicyServiceHandler) Delete(ctx context.Context, in *EcologyPolicy, out *EcologyPolicyResponse) error {
	return h.EcologyPolicyServiceHandler.Delete(ctx, in, out)
}

func (h *ecologyPolicyServiceHandler) Get(ctx context.Context, in *EcologyPolicy, out *EcologyPolicyResponse) error {
	return h.EcologyPolicyServiceHandler.Get(ctx, in, out)
}

func (h *ecologyPolicyServiceHandler) Search(ctx context.Context, in *EcologyPolicyRequest, out *EcologyPolicyResponse) error {
	return h.EcologyPolicyServiceHandler.Search(ctx, in, out)
}

func (h *ecologyPolicyServiceHandler) Export(ctx context.Context, in *EcologyPolicyRequest, out *EcologyPolicyResponse) error {
	return h.EcologyPolicyServiceHandler.Export(ctx, in, out)
}
