// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: familyIncomeService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//收入情况
type FamilyIncome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	FamilyId            int64                `protobuf:"varint,2,opt,name=family_id,json=familyId,proto3" json:"family_id"`
	Year                int32                `protobuf:"varint,3,opt,name=year,proto3" json:"year"`
	Quarter             int32                `protobuf:"varint,4,opt,name=quarter,proto3" json:"quarter"`
	BusinessIncome      float32              `protobuf:"fixed32,5,opt,name=business_income,json=businessIncome,proto3" json:"business_income"`
	PlantingIncome      float32              `protobuf:"fixed32,6,opt,name=planting_income,json=plantingIncome,proto3" json:"planting_income"`
	AquacultureIncome   float32              `protobuf:"fixed32,7,opt,name=aquaculture_income,json=aquacultureIncome,proto3" json:"aquaculture_income"`
	ProcessIncome       float32              `protobuf:"fixed32,8,opt,name=process_income,json=processIncome,proto3" json:"process_income"`
	ServiceIncome       float32              `protobuf:"fixed32,9,opt,name=service_income,json=serviceIncome,proto3" json:"service_income"`
	BusinessCost        float32              `protobuf:"fixed32,10,opt,name=business_cost,json=businessCost,proto3" json:"business_cost"`
	PlantingCost        float32              `protobuf:"fixed32,11,opt,name=planting_cost,json=plantingCost,proto3" json:"planting_cost"`
	AquacultureCost     float32              `protobuf:"fixed32,12,opt,name=aquaculture_cost,json=aquacultureCost,proto3" json:"aquaculture_cost"`
	ProcessCost         float32              `protobuf:"fixed32,13,opt,name=process_cost,json=processCost,proto3" json:"process_cost"`
	ServiceCost         float32              `protobuf:"fixed32,14,opt,name=service_cost,json=serviceCost,proto3" json:"service_cost"`
	WorkIncome          float32              `protobuf:"fixed32,15,opt,name=work_income,json=workIncome,proto3" json:"work_income"`
	AssetIncome         float32              `protobuf:"fixed32,16,opt,name=asset_income,json=assetIncome,proto3" json:"asset_income"`
	TransferIncome      float32              `protobuf:"fixed32,17,opt,name=transfer_income,json=transferIncome,proto3" json:"transfer_income"`
	SubsistenceFund     float32              `protobuf:"fixed32,18,opt,name=subsistence_fund,json=subsistenceFund,proto3" json:"subsistence_fund"`
	HardshipFund        float32              `protobuf:"fixed32,19,opt,name=hardship_fund,json=hardshipFund,proto3" json:"hardship_fund"`
	ElderlyFund         float32              `protobuf:"fixed32,20,opt,name=elderly_fund,json=elderlyFund,proto3" json:"elderly_fund"`
	BirthFund           float32              `protobuf:"fixed32,21,opt,name=birth_fund,json=birthFund,proto3" json:"birth_fund"`
	EcologyFund         float32              `protobuf:"fixed32,22,opt,name=ecology_fund,json=ecologyFund,proto3" json:"ecology_fund"`
	OtherTransferIncome float32              `protobuf:"fixed32,23,opt,name=other_transfer_income,json=otherTransferIncome,proto3" json:"other_transfer_income"`
	TotalIncome         float32              `protobuf:"fixed32,24,opt,name=total_income,json=totalIncome,proto3" json:"total_income"`
	NetIncome           float32              `protobuf:"fixed32,25,opt,name=net_income,json=netIncome,proto3" json:"net_income"`
	PerNetIncome        float32              `protobuf:"fixed32,26,opt,name=per_net_income,json=perNetIncome,proto3" json:"per_net_income"`
	CreatedAt           string               `protobuf:"bytes,27,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt           string               `protobuf:"bytes,28,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Family              *Family              `protobuf:"bytes,29,opt,name=family,proto3" json:"family"`
	IncomeAssetLog      *IncomeAssetLog      `protobuf:"bytes,30,opt,name=income_asset_log,json=incomeAssetLog,proto3" json:"income_asset_log"`
	IncomeBusinessLogs  []*IncomeBusinessLog `protobuf:"bytes,31,rep,name=income_business_logs,json=incomeBusinessLogs,proto3" json:"income_business_logs"`
	IncomeWorkLogs      []*IncomeWorkLog     `protobuf:"bytes,32,rep,name=income_work_logs,json=incomeWorkLogs,proto3" json:"income_work_logs"`
	IncomeTransferLogs  []*IncomeTransferLog `protobuf:"bytes,33,rep,name=income_transfer_logs,json=incomeTransferLogs,proto3" json:"income_transfer_logs"`
	IncomeOtherLog      *IncomeOtherLog      `protobuf:"bytes,34,opt,name=income_other_log,json=incomeOtherLog,proto3" json:"income_other_log"`
}

func (x *FamilyIncome) Reset() {
	*x = FamilyIncome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyIncome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyIncome) ProtoMessage() {}

func (x *FamilyIncome) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyIncome.ProtoReflect.Descriptor instead.
func (*FamilyIncome) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{0}
}

func (x *FamilyIncome) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FamilyIncome) GetFamilyId() int64 {
	if x != nil {
		return x.FamilyId
	}
	return 0
}

func (x *FamilyIncome) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FamilyIncome) GetQuarter() int32 {
	if x != nil {
		return x.Quarter
	}
	return 0
}

func (x *FamilyIncome) GetBusinessIncome() float32 {
	if x != nil {
		return x.BusinessIncome
	}
	return 0
}

func (x *FamilyIncome) GetPlantingIncome() float32 {
	if x != nil {
		return x.PlantingIncome
	}
	return 0
}

func (x *FamilyIncome) GetAquacultureIncome() float32 {
	if x != nil {
		return x.AquacultureIncome
	}
	return 0
}

func (x *FamilyIncome) GetProcessIncome() float32 {
	if x != nil {
		return x.ProcessIncome
	}
	return 0
}

func (x *FamilyIncome) GetServiceIncome() float32 {
	if x != nil {
		return x.ServiceIncome
	}
	return 0
}

func (x *FamilyIncome) GetBusinessCost() float32 {
	if x != nil {
		return x.BusinessCost
	}
	return 0
}

func (x *FamilyIncome) GetPlantingCost() float32 {
	if x != nil {
		return x.PlantingCost
	}
	return 0
}

func (x *FamilyIncome) GetAquacultureCost() float32 {
	if x != nil {
		return x.AquacultureCost
	}
	return 0
}

func (x *FamilyIncome) GetProcessCost() float32 {
	if x != nil {
		return x.ProcessCost
	}
	return 0
}

func (x *FamilyIncome) GetServiceCost() float32 {
	if x != nil {
		return x.ServiceCost
	}
	return 0
}

func (x *FamilyIncome) GetWorkIncome() float32 {
	if x != nil {
		return x.WorkIncome
	}
	return 0
}

func (x *FamilyIncome) GetAssetIncome() float32 {
	if x != nil {
		return x.AssetIncome
	}
	return 0
}

func (x *FamilyIncome) GetTransferIncome() float32 {
	if x != nil {
		return x.TransferIncome
	}
	return 0
}

func (x *FamilyIncome) GetSubsistenceFund() float32 {
	if x != nil {
		return x.SubsistenceFund
	}
	return 0
}

func (x *FamilyIncome) GetHardshipFund() float32 {
	if x != nil {
		return x.HardshipFund
	}
	return 0
}

func (x *FamilyIncome) GetElderlyFund() float32 {
	if x != nil {
		return x.ElderlyFund
	}
	return 0
}

func (x *FamilyIncome) GetBirthFund() float32 {
	if x != nil {
		return x.BirthFund
	}
	return 0
}

func (x *FamilyIncome) GetEcologyFund() float32 {
	if x != nil {
		return x.EcologyFund
	}
	return 0
}

func (x *FamilyIncome) GetOtherTransferIncome() float32 {
	if x != nil {
		return x.OtherTransferIncome
	}
	return 0
}

func (x *FamilyIncome) GetTotalIncome() float32 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *FamilyIncome) GetNetIncome() float32 {
	if x != nil {
		return x.NetIncome
	}
	return 0
}

func (x *FamilyIncome) GetPerNetIncome() float32 {
	if x != nil {
		return x.PerNetIncome
	}
	return 0
}

func (x *FamilyIncome) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FamilyIncome) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *FamilyIncome) GetFamily() *Family {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *FamilyIncome) GetIncomeAssetLog() *IncomeAssetLog {
	if x != nil {
		return x.IncomeAssetLog
	}
	return nil
}

func (x *FamilyIncome) GetIncomeBusinessLogs() []*IncomeBusinessLog {
	if x != nil {
		return x.IncomeBusinessLogs
	}
	return nil
}

func (x *FamilyIncome) GetIncomeWorkLogs() []*IncomeWorkLog {
	if x != nil {
		return x.IncomeWorkLogs
	}
	return nil
}

func (x *FamilyIncome) GetIncomeTransferLogs() []*IncomeTransferLog {
	if x != nil {
		return x.IncomeTransferLogs
	}
	return nil
}

func (x *FamilyIncome) GetIncomeOtherLog() *IncomeOtherLog {
	if x != nil {
		return x.IncomeOtherLog
	}
	return nil
}

type IncomeAssetLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                 //ID
	FamilyIncomeId int64   `protobuf:"varint,2,opt,name=family_income_id,json=familyIncomeId,proto3" json:"family_income_id"` //家庭收入ID
	AssetBonus     float32 `protobuf:"fixed32,3,opt,name=asset_bonus,json=assetBonus,proto3" json:"asset_bonus"`              //资产分红收入
	LandRent       float32 `protobuf:"fixed32,4,opt,name=land_rent,json=landRent,proto3" json:"land_rent"`                    //土地租金
	HouseRent      float32 `protobuf:"fixed32,5,opt,name=house_rent,json=houseRent,proto3" json:"house_rent"`                 //房屋租金
	OtherIncome    float32 `protobuf:"fixed32,6,opt,name=other_income,json=otherIncome,proto3" json:"other_income"`           //其它财产收入
	CreatedAt      string  `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt      string  `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *IncomeAssetLog) Reset() {
	*x = IncomeAssetLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeAssetLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeAssetLog) ProtoMessage() {}

func (x *IncomeAssetLog) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeAssetLog.ProtoReflect.Descriptor instead.
func (*IncomeAssetLog) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{1}
}

func (x *IncomeAssetLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IncomeAssetLog) GetFamilyIncomeId() int64 {
	if x != nil {
		return x.FamilyIncomeId
	}
	return 0
}

func (x *IncomeAssetLog) GetAssetBonus() float32 {
	if x != nil {
		return x.AssetBonus
	}
	return 0
}

func (x *IncomeAssetLog) GetLandRent() float32 {
	if x != nil {
		return x.LandRent
	}
	return 0
}

func (x *IncomeAssetLog) GetHouseRent() float32 {
	if x != nil {
		return x.HouseRent
	}
	return 0
}

func (x *IncomeAssetLog) GetOtherIncome() float32 {
	if x != nil {
		return x.OtherIncome
	}
	return 0
}

func (x *IncomeAssetLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *IncomeAssetLog) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type IncomeBusinessLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                 //ID
	FamilyIncomeId int64   `protobuf:"varint,2,opt,name=family_income_id,json=familyIncomeId,proto3" json:"family_income_id"` //家庭收入ID
	Industry       string  `protobuf:"bytes,3,opt,name=industry,proto3" json:"industry"`                                      //行业: 1、种植业  2、养殖业 3、加工业 4、服务业
	Title          string  `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`                                            //行业类别
	Unit           string  `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit"`                                              //单位
	Num            float32 `protobuf:"fixed32,6,opt,name=num,proto3" json:"num"`                                              //数量
	Income         float32 `protobuf:"fixed32,7,opt,name=income,proto3" json:"income"`                                        //收入金额
	Cost           float32 `protobuf:"fixed32,8,opt,name=cost,proto3" json:"cost"`                                            //成本支出
	CreatedAt      string  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt      string  `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *IncomeBusinessLog) Reset() {
	*x = IncomeBusinessLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeBusinessLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeBusinessLog) ProtoMessage() {}

func (x *IncomeBusinessLog) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeBusinessLog.ProtoReflect.Descriptor instead.
func (*IncomeBusinessLog) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{2}
}

func (x *IncomeBusinessLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IncomeBusinessLog) GetFamilyIncomeId() int64 {
	if x != nil {
		return x.FamilyIncomeId
	}
	return 0
}

func (x *IncomeBusinessLog) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *IncomeBusinessLog) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *IncomeBusinessLog) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *IncomeBusinessLog) GetNum() float32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *IncomeBusinessLog) GetIncome() float32 {
	if x != nil {
		return x.Income
	}
	return 0
}

func (x *IncomeBusinessLog) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *IncomeBusinessLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *IncomeBusinessLog) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type IncomeWorkLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                 //ID
	FamilyIncomeId int64   `protobuf:"varint,2,opt,name=family_income_id,json=familyIncomeId,proto3" json:"family_income_id"` //家庭收入ID
	PersonId       int64   `protobuf:"varint,3,opt,name=person_id,json=personId,proto3" json:"person_id"`                     //成员ID
	RealName       string  `protobuf:"bytes,4,opt,name=real_name,json=realName,proto3" json:"real_name"`                      //姓名[冗余]
	IdCard         string  `protobuf:"bytes,5,opt,name=id_card,json=idCard,proto3" json:"id_card"`                            //身份证号码[冗余]
	Province       string  `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`                                      //省
	City           string  `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`                                              //市
	County         string  `protobuf:"bytes,8,opt,name=county,proto3" json:"county"`                                          //县
	Post           string  `protobuf:"bytes,9,opt,name=post,proto3" json:"post"`                                              //岗位
	Months         int32   `protobuf:"varint,10,opt,name=months,proto3" json:"months"`                                        //务工月数
	Salary         float32 `protobuf:"fixed32,11,opt,name=salary,proto3" json:"salary"`                                       //月薪
	Tel            string  `protobuf:"bytes,12,opt,name=tel,proto3" json:"tel"`                                               //联系电话
	Total          float32 `protobuf:"fixed32,13,opt,name=total,proto3" json:"total"`                                         //合计
	CreatedAt      string  `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt      string  `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *IncomeWorkLog) Reset() {
	*x = IncomeWorkLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeWorkLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeWorkLog) ProtoMessage() {}

func (x *IncomeWorkLog) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeWorkLog.ProtoReflect.Descriptor instead.
func (*IncomeWorkLog) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{3}
}

func (x *IncomeWorkLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IncomeWorkLog) GetFamilyIncomeId() int64 {
	if x != nil {
		return x.FamilyIncomeId
	}
	return 0
}

func (x *IncomeWorkLog) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *IncomeWorkLog) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *IncomeWorkLog) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *IncomeWorkLog) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *IncomeWorkLog) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *IncomeWorkLog) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *IncomeWorkLog) GetPost() string {
	if x != nil {
		return x.Post
	}
	return ""
}

func (x *IncomeWorkLog) GetMonths() int32 {
	if x != nil {
		return x.Months
	}
	return 0
}

func (x *IncomeWorkLog) GetSalary() float32 {
	if x != nil {
		return x.Salary
	}
	return 0
}

func (x *IncomeWorkLog) GetTel() string {
	if x != nil {
		return x.Tel
	}
	return ""
}

func (x *IncomeWorkLog) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *IncomeWorkLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *IncomeWorkLog) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type IncomeTransferLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                 //ID
	FamilyIncomeId int64   `protobuf:"varint,2,opt,name=family_income_id,json=familyIncomeId,proto3" json:"family_income_id"` //家庭收入ID
	Type           string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type"`                                              //类型:1-低保金，2-特困供养金，3养老金或退休金，4-计划生育金，5-生态补偿金
	Month          int32   `protobuf:"varint,4,opt,name=month,proto3" json:"month"`                                           //月份
	Num            int32   `protobuf:"varint,5,opt,name=num,proto3" json:"num"`                                               //享受人数
	Money          float32 `protobuf:"fixed32,6,opt,name=money,proto3" json:"money"`                                          //享受金额
	CreatedAt      string  `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt      string  `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *IncomeTransferLog) Reset() {
	*x = IncomeTransferLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeTransferLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeTransferLog) ProtoMessage() {}

func (x *IncomeTransferLog) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeTransferLog.ProtoReflect.Descriptor instead.
func (*IncomeTransferLog) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{4}
}

func (x *IncomeTransferLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IncomeTransferLog) GetFamilyIncomeId() int64 {
	if x != nil {
		return x.FamilyIncomeId
	}
	return 0
}

func (x *IncomeTransferLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IncomeTransferLog) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *IncomeTransferLog) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *IncomeTransferLog) GetMoney() float32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *IncomeTransferLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *IncomeTransferLog) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type IncomeOtherLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                                                     //ID
	FamilyIncomeId                  int64   `protobuf:"varint,2,opt,name=family_income_id,json=familyIncomeId,proto3" json:"family_income_id"`                                                     //家庭收入ID
	SocialReliefFund                float32 `protobuf:"fixed32,3,opt,name=social_relief_fund,json=socialReliefFund,proto3" json:"social_relief_fund"`                                              //社会救济和补助
	AgricultureComprehensiveSubsidy float32 `protobuf:"fixed32,4,opt,name=agriculture_comprehensive_subsidy,json=agricultureComprehensiveSubsidy,proto3" json:"agriculture_comprehensive_subsidy"` //农业综合补贴
	MaintainIncome                  float32 `protobuf:"fixed32,5,opt,name=maintain_income,json=maintainIncome,proto3" json:"maintain_income"`                                                      //赡养收入
	PeasantBenefitSubsidy           float32 `protobuf:"fixed32,6,opt,name=peasant_benefit_subsidy,json=peasantBenefitSubsidy,proto3" json:"peasant_benefit_subsidy"`                               //惠农补贴
	EcologySubsidy                  float32 `protobuf:"fixed32,7,opt,name=ecology_subsidy,json=ecologySubsidy,proto3" json:"ecology_subsidy"`                                                      //生态补偿金
	PolicyLifeSubsidy               float32 `protobuf:"fixed32,8,opt,name=policy_life_subsidy,json=policyLifeSubsidy,proto3" json:"policy_life_subsidy"`                                           //政策性生活补贴
	DonationAndIndemnity            float32 `protobuf:"fixed32,9,opt,name=donation_and_indemnity,json=donationAndIndemnity,proto3" json:"donation_and_indemnity"`                                  //经常性捐款和赔偿
	ElderlySubsidy                  float32 `protobuf:"fixed32,10,opt,name=elderly_subsidy,json=elderlySubsidy,proto3" json:"elderly_subsidy"`                                                     //高龄补贴
	DisabilitySubsidy               float32 `protobuf:"fixed32,11,opt,name=disability_subsidy,json=disabilitySubsidy,proto3" json:"disability_subsidy"`                                            //残疾人补贴
	OtherSubsidy                    float32 `protobuf:"fixed32,12,opt,name=other_subsidy,json=otherSubsidy,proto3" json:"other_subsidy"`                                                           //其它收入
	CreatedAt                       string  `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt                       string  `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *IncomeOtherLog) Reset() {
	*x = IncomeOtherLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeOtherLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeOtherLog) ProtoMessage() {}

func (x *IncomeOtherLog) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeOtherLog.ProtoReflect.Descriptor instead.
func (*IncomeOtherLog) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{5}
}

func (x *IncomeOtherLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IncomeOtherLog) GetFamilyIncomeId() int64 {
	if x != nil {
		return x.FamilyIncomeId
	}
	return 0
}

func (x *IncomeOtherLog) GetSocialReliefFund() float32 {
	if x != nil {
		return x.SocialReliefFund
	}
	return 0
}

func (x *IncomeOtherLog) GetAgricultureComprehensiveSubsidy() float32 {
	if x != nil {
		return x.AgricultureComprehensiveSubsidy
	}
	return 0
}

func (x *IncomeOtherLog) GetMaintainIncome() float32 {
	if x != nil {
		return x.MaintainIncome
	}
	return 0
}

func (x *IncomeOtherLog) GetPeasantBenefitSubsidy() float32 {
	if x != nil {
		return x.PeasantBenefitSubsidy
	}
	return 0
}

func (x *IncomeOtherLog) GetEcologySubsidy() float32 {
	if x != nil {
		return x.EcologySubsidy
	}
	return 0
}

func (x *IncomeOtherLog) GetPolicyLifeSubsidy() float32 {
	if x != nil {
		return x.PolicyLifeSubsidy
	}
	return 0
}

func (x *IncomeOtherLog) GetDonationAndIndemnity() float32 {
	if x != nil {
		return x.DonationAndIndemnity
	}
	return 0
}

func (x *IncomeOtherLog) GetElderlySubsidy() float32 {
	if x != nil {
		return x.ElderlySubsidy
	}
	return 0
}

func (x *IncomeOtherLog) GetDisabilitySubsidy() float32 {
	if x != nil {
		return x.DisabilitySubsidy
	}
	return 0
}

func (x *IncomeOtherLog) GetOtherSubsidy() float32 {
	if x != nil {
		return x.OtherSubsidy
	}
	return 0
}

func (x *IncomeOtherLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *IncomeOtherLog) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type FamilyIncomeLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	FamilyId          int64              `protobuf:"varint,2,opt,name=family_id,json=familyId,proto3" json:"family_id"`
	Year              int32              `protobuf:"varint,3,opt,name=year,proto3" json:"year"`
	Quarter           int32              `protobuf:"varint,4,opt,name=quarter,proto3" json:"quarter"`
	Type              string             `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`
	IncomeAssetLog    *IncomeAssetLog    `protobuf:"bytes,6,opt,name=income_asset_log,json=incomeAssetLog,proto3" json:"income_asset_log"`
	IncomeBusinessLog *IncomeBusinessLog `protobuf:"bytes,7,opt,name=income_business_log,json=incomeBusinessLog,proto3" json:"income_business_log"`
	IncomeWorkLog     *IncomeWorkLog     `protobuf:"bytes,8,opt,name=income_work_log,json=incomeWorkLog,proto3" json:"income_work_log"`
	IncomeTransferLog *IncomeTransferLog `protobuf:"bytes,9,opt,name=income_transfer_log,json=incomeTransferLog,proto3" json:"income_transfer_log"`
	IncomeOtherLog    *IncomeOtherLog    `protobuf:"bytes,10,opt,name=income_other_log,json=incomeOtherLog,proto3" json:"income_other_log"`
}

func (x *FamilyIncomeLogRequest) Reset() {
	*x = FamilyIncomeLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyIncomeLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyIncomeLogRequest) ProtoMessage() {}

func (x *FamilyIncomeLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyIncomeLogRequest.ProtoReflect.Descriptor instead.
func (*FamilyIncomeLogRequest) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{6}
}

func (x *FamilyIncomeLogRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FamilyIncomeLogRequest) GetFamilyId() int64 {
	if x != nil {
		return x.FamilyId
	}
	return 0
}

func (x *FamilyIncomeLogRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FamilyIncomeLogRequest) GetQuarter() int32 {
	if x != nil {
		return x.Quarter
	}
	return 0
}

func (x *FamilyIncomeLogRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FamilyIncomeLogRequest) GetIncomeAssetLog() *IncomeAssetLog {
	if x != nil {
		return x.IncomeAssetLog
	}
	return nil
}

func (x *FamilyIncomeLogRequest) GetIncomeBusinessLog() *IncomeBusinessLog {
	if x != nil {
		return x.IncomeBusinessLog
	}
	return nil
}

func (x *FamilyIncomeLogRequest) GetIncomeWorkLog() *IncomeWorkLog {
	if x != nil {
		return x.IncomeWorkLog
	}
	return nil
}

func (x *FamilyIncomeLogRequest) GetIncomeTransferLog() *IncomeTransferLog {
	if x != nil {
		return x.IncomeTransferLog
	}
	return nil
}

func (x *FamilyIncomeLogRequest) GetIncomeOtherLog() *IncomeOtherLog {
	if x != nil {
		return x.IncomeOtherLog
	}
	return nil
}

type FamilyIncomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged    int64  `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Sorting  string `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting"`
	//----
	FamilyId    int64   `protobuf:"varint,4,opt,name=family_id,json=familyId,proto3" json:"family_id"`
	PersonId    int64   `protobuf:"varint,5,opt,name=person_id,json=personId,proto3" json:"person_id"`
	MasterId    int64   `protobuf:"varint,6,opt,name=master_id,json=masterId,proto3" json:"master_id"`
	RealName    string  `protobuf:"bytes,7,opt,name=real_name,json=realName,proto3" json:"real_name"`
	IdCard      string  `protobuf:"bytes,8,opt,name=id_card,json=idCard,proto3" json:"id_card"`
	Status      string  `protobuf:"bytes,9,opt,name=status,proto3" json:"status"`
	FamilyIds   []int64 `protobuf:"varint,10,rep,packed,name=family_ids,json=familyIds,proto3" json:"family_ids"`
	Type        string  `protobuf:"bytes,12,opt,name=type,proto3" json:"type"`
	TownCode    int64   `protobuf:"varint,13,opt,name=town_code,json=townCode,proto3" json:"town_code"`
	VillageCode int64   `protobuf:"varint,14,opt,name=village_code,json=villageCode,proto3" json:"village_code"`
	GroupCode   int64   `protobuf:"varint,15,opt,name=group_code,json=groupCode,proto3" json:"group_code"`
	Year        int32   `protobuf:"varint,16,opt,name=year,proto3" json:"year"`
	Quarter     int32   `protobuf:"varint,17,opt,name=quarter,proto3" json:"quarter"`
	RegionId    int64   `protobuf:"varint,18,opt,name=region_id,json=regionId,proto3" json:"region_id"`
}

func (x *FamilyIncomeRequest) Reset() {
	*x = FamilyIncomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyIncomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyIncomeRequest) ProtoMessage() {}

func (x *FamilyIncomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyIncomeRequest.ProtoReflect.Descriptor instead.
func (*FamilyIncomeRequest) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{7}
}

func (x *FamilyIncomeRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *FamilyIncomeRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FamilyIncomeRequest) GetSorting() string {
	if x != nil {
		return x.Sorting
	}
	return ""
}

func (x *FamilyIncomeRequest) GetFamilyId() int64 {
	if x != nil {
		return x.FamilyId
	}
	return 0
}

func (x *FamilyIncomeRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *FamilyIncomeRequest) GetMasterId() int64 {
	if x != nil {
		return x.MasterId
	}
	return 0
}

func (x *FamilyIncomeRequest) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *FamilyIncomeRequest) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *FamilyIncomeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FamilyIncomeRequest) GetFamilyIds() []int64 {
	if x != nil {
		return x.FamilyIds
	}
	return nil
}

func (x *FamilyIncomeRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FamilyIncomeRequest) GetTownCode() int64 {
	if x != nil {
		return x.TownCode
	}
	return 0
}

func (x *FamilyIncomeRequest) GetVillageCode() int64 {
	if x != nil {
		return x.VillageCode
	}
	return 0
}

func (x *FamilyIncomeRequest) GetGroupCode() int64 {
	if x != nil {
		return x.GroupCode
	}
	return 0
}

func (x *FamilyIncomeRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FamilyIncomeRequest) GetQuarter() int32 {
	if x != nil {
		return x.Quarter
	}
	return 0
}

func (x *FamilyIncomeRequest) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type FamilyIncomeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *FamilyIncome   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager   `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*FamilyIncome `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Info   *common.Info    `protobuf:"bytes,4,opt,name=info,proto3" json:"info"`
}

func (x *FamilyIncomeData) Reset() {
	*x = FamilyIncomeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyIncomeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyIncomeData) ProtoMessage() {}

func (x *FamilyIncomeData) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyIncomeData.ProtoReflect.Descriptor instead.
func (*FamilyIncomeData) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{8}
}

func (x *FamilyIncomeData) GetEntity() *FamilyIncome {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *FamilyIncomeData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *FamilyIncomeData) GetItems() []*FamilyIncome {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FamilyIncomeData) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type FamilyIncomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *FamilyIncomeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Error *common.Error     `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
}

func (x *FamilyIncomeResponse) Reset() {
	*x = FamilyIncomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_familyIncomeService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyIncomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyIncomeResponse) ProtoMessage() {}

func (x *FamilyIncomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_familyIncomeService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyIncomeResponse.ProtoReflect.Descriptor instead.
func (*FamilyIncomeResponse) Descriptor() ([]byte, []int) {
	return file_familyIncomeService_proto_rawDescGZIP(), []int{9}
}

func (x *FamilyIncomeResponse) GetData() *FamilyIncomeData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FamilyIncomeResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_familyIncomeService_proto protoreflect.FileDescriptor

var file_familyIncomeService_proto_rawDesc = []byte{
	0x0a, 0x19, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x0b,
	0x0a, 0x0c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x71, 0x75, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x71, 0x75, 0x61, 0x63, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x71, 0x75, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x71,
	0x75, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x73, 0x68, 0x69, 0x70, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x46,
	0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x46, 0x75,
	0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x28, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x0e, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x4d, 0x0a,
	0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x10,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x52,
	0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x12,
	0x4d, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x42,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c,
	0x6f, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x22, 0x88, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8f, 0x02,
	0x0a, 0x11, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x8e, 0x03, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x6f,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x65,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xdd, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xef, 0x04, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x21, 0x61,
	0x67, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x61, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x70, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x70, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x63, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64,
	0x79, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64,
	0x79, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x14, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x6d, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6c, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x69, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x16, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x10,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x12, 0x4b, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x3f, 0x0a,
	0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x52,
	0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x4b,
	0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x42, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52,
	0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x22,
	0xe4, 0x03, 0x0a, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x6b, 0x0a, 0x14, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xef, 0x05,
	0x0a, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x1a, 0x1e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x1a,
	0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x20,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_familyIncomeService_proto_rawDescOnce sync.Once
	file_familyIncomeService_proto_rawDescData = file_familyIncomeService_proto_rawDesc
)

func file_familyIncomeService_proto_rawDescGZIP() []byte {
	file_familyIncomeService_proto_rawDescOnce.Do(func() {
		file_familyIncomeService_proto_rawDescData = protoimpl.X.CompressGZIP(file_familyIncomeService_proto_rawDescData)
	})
	return file_familyIncomeService_proto_rawDescData
}

var file_familyIncomeService_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_familyIncomeService_proto_goTypes = []interface{}{
	(*FamilyIncome)(nil),           // 0: services.FamilyIncome
	(*IncomeAssetLog)(nil),         // 1: services.IncomeAssetLog
	(*IncomeBusinessLog)(nil),      // 2: services.IncomeBusinessLog
	(*IncomeWorkLog)(nil),          // 3: services.IncomeWorkLog
	(*IncomeTransferLog)(nil),      // 4: services.IncomeTransferLog
	(*IncomeOtherLog)(nil),         // 5: services.IncomeOtherLog
	(*FamilyIncomeLogRequest)(nil), // 6: services.FamilyIncomeLogRequest
	(*FamilyIncomeRequest)(nil),    // 7: services.FamilyIncomeRequest
	(*FamilyIncomeData)(nil),       // 8: services.FamilyIncomeData
	(*FamilyIncomeResponse)(nil),   // 9: services.FamilyIncomeResponse
	(*Family)(nil),                 // 10: services.Family
	(*common.Pager)(nil),           // 11: common.Pager
	(*common.Info)(nil),            // 12: common.Info
	(*common.Error)(nil),           // 13: common.Error
}
var file_familyIncomeService_proto_depIdxs = []int32{
	10, // 0: services.FamilyIncome.family:type_name -> services.Family
	1,  // 1: services.FamilyIncome.income_asset_log:type_name -> services.IncomeAssetLog
	2,  // 2: services.FamilyIncome.income_business_logs:type_name -> services.IncomeBusinessLog
	3,  // 3: services.FamilyIncome.income_work_logs:type_name -> services.IncomeWorkLog
	4,  // 4: services.FamilyIncome.income_transfer_logs:type_name -> services.IncomeTransferLog
	5,  // 5: services.FamilyIncome.income_other_log:type_name -> services.IncomeOtherLog
	1,  // 6: services.FamilyIncomeLogRequest.income_asset_log:type_name -> services.IncomeAssetLog
	2,  // 7: services.FamilyIncomeLogRequest.income_business_log:type_name -> services.IncomeBusinessLog
	3,  // 8: services.FamilyIncomeLogRequest.income_work_log:type_name -> services.IncomeWorkLog
	4,  // 9: services.FamilyIncomeLogRequest.income_transfer_log:type_name -> services.IncomeTransferLog
	5,  // 10: services.FamilyIncomeLogRequest.income_other_log:type_name -> services.IncomeOtherLog
	0,  // 11: services.FamilyIncomeData.entity:type_name -> services.FamilyIncome
	11, // 12: services.FamilyIncomeData.pager:type_name -> common.Pager
	0,  // 13: services.FamilyIncomeData.items:type_name -> services.FamilyIncome
	12, // 14: services.FamilyIncomeData.info:type_name -> common.Info
	8,  // 15: services.FamilyIncomeResponse.data:type_name -> services.FamilyIncomeData
	13, // 16: services.FamilyIncomeResponse.error:type_name -> common.Error
	0,  // 17: services.FamilyIncomeService.Create:input_type -> services.FamilyIncome
	0,  // 18: services.FamilyIncomeService.Update:input_type -> services.FamilyIncome
	0,  // 19: services.FamilyIncomeService.Delete:input_type -> services.FamilyIncome
	0,  // 20: services.FamilyIncomeService.Get:input_type -> services.FamilyIncome
	0,  // 21: services.FamilyIncomeService.Detail:input_type -> services.FamilyIncome
	7,  // 22: services.FamilyIncomeService.Search:input_type -> services.FamilyIncomeRequest
	6,  // 23: services.FamilyIncomeService.CreateLog:input_type -> services.FamilyIncomeLogRequest
	6,  // 24: services.FamilyIncomeService.UpdateLog:input_type -> services.FamilyIncomeLogRequest
	6,  // 25: services.FamilyIncomeService.DeleteLog:input_type -> services.FamilyIncomeLogRequest
	7,  // 26: services.FamilyIncomeService.Export:input_type -> services.FamilyIncomeRequest
	9,  // 27: services.FamilyIncomeService.Create:output_type -> services.FamilyIncomeResponse
	9,  // 28: services.FamilyIncomeService.Update:output_type -> services.FamilyIncomeResponse
	9,  // 29: services.FamilyIncomeService.Delete:output_type -> services.FamilyIncomeResponse
	9,  // 30: services.FamilyIncomeService.Get:output_type -> services.FamilyIncomeResponse
	9,  // 31: services.FamilyIncomeService.Detail:output_type -> services.FamilyIncomeResponse
	9,  // 32: services.FamilyIncomeService.Search:output_type -> services.FamilyIncomeResponse
	9,  // 33: services.FamilyIncomeService.CreateLog:output_type -> services.FamilyIncomeResponse
	9,  // 34: services.FamilyIncomeService.UpdateLog:output_type -> services.FamilyIncomeResponse
	9,  // 35: services.FamilyIncomeService.DeleteLog:output_type -> services.FamilyIncomeResponse
	9,  // 36: services.FamilyIncomeService.Export:output_type -> services.FamilyIncomeResponse
	27, // [27:37] is the sub-list for method output_type
	17, // [17:27] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_familyIncomeService_proto_init() }
func file_familyIncomeService_proto_init() {
	if File_familyIncomeService_proto != nil {
		return
	}
	file_familyService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_familyIncomeService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyIncome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_familyIncomeService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeAssetLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_familyIncomeService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeBusinessLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_familyIncomeService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeWorkLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_familyIncomeService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeTransferLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_familyIncomeService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeOtherLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_familyIncomeService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyIncomeLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_familyIncomeService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyIncomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_familyIncomeService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyIncomeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_familyIncomeService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyIncomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_familyIncomeService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_familyIncomeService_proto_goTypes,
		DependencyIndexes: file_familyIncomeService_proto_depIdxs,
		MessageInfos:      file_familyIncomeService_proto_msgTypes,
	}.Build()
	File_familyIncomeService_proto = out.File
	file_familyIncomeService_proto_rawDesc = nil
	file_familyIncomeService_proto_goTypes = nil
	file_familyIncomeService_proto_depIdxs = nil
}
