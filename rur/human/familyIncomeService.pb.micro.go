// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: familyIncomeService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FamilyIncomeService service

func NewFamilyIncomeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FamilyIncomeService service

type FamilyIncomeService interface {
	//创建收入情况
	Create(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error)
	// 编辑收入情况
	Update(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error)
	// 删除收入情况
	Delete(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error)
	// 获取收入情况详情
	Get(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error)
	// 获取收入情况详情
	Detail(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error)
	//分页查询家庭列表
	Search(ctx context.Context, in *FamilyIncomeRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error)
	//增加收入明细
	CreateLog(ctx context.Context, in *FamilyIncomeLogRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error)
	//修改收入明细
	UpdateLog(ctx context.Context, in *FamilyIncomeLogRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error)
	//删除收入明细
	DeleteLog(ctx context.Context, in *FamilyIncomeLogRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error)
	//导出家庭收入信息
	Export(ctx context.Context, in *FamilyIncomeRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error)
}

type familyIncomeService struct {
	c    client.Client
	name string
}

func NewFamilyIncomeService(name string, c client.Client) FamilyIncomeService {
	return &familyIncomeService{
		c:    c,
		name: name,
	}
}

func (c *familyIncomeService) Create(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.Create", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyIncomeService) Update(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.Update", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyIncomeService) Delete(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.Delete", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyIncomeService) Get(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.Get", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyIncomeService) Detail(ctx context.Context, in *FamilyIncome, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.Detail", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyIncomeService) Search(ctx context.Context, in *FamilyIncomeRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.Search", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyIncomeService) CreateLog(ctx context.Context, in *FamilyIncomeLogRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.CreateLog", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyIncomeService) UpdateLog(ctx context.Context, in *FamilyIncomeLogRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.UpdateLog", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyIncomeService) DeleteLog(ctx context.Context, in *FamilyIncomeLogRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.DeleteLog", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyIncomeService) Export(ctx context.Context, in *FamilyIncomeRequest, opts ...client.CallOption) (*FamilyIncomeResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyIncomeService.Export", in)
	out := new(FamilyIncomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FamilyIncomeService service

type FamilyIncomeServiceHandler interface {
	//创建收入情况
	Create(context.Context, *FamilyIncome, *FamilyIncomeResponse) error
	// 编辑收入情况
	Update(context.Context, *FamilyIncome, *FamilyIncomeResponse) error
	// 删除收入情况
	Delete(context.Context, *FamilyIncome, *FamilyIncomeResponse) error
	// 获取收入情况详情
	Get(context.Context, *FamilyIncome, *FamilyIncomeResponse) error
	// 获取收入情况详情
	Detail(context.Context, *FamilyIncome, *FamilyIncomeResponse) error
	//分页查询家庭列表
	Search(context.Context, *FamilyIncomeRequest, *FamilyIncomeResponse) error
	//增加收入明细
	CreateLog(context.Context, *FamilyIncomeLogRequest, *FamilyIncomeResponse) error
	//修改收入明细
	UpdateLog(context.Context, *FamilyIncomeLogRequest, *FamilyIncomeResponse) error
	//删除收入明细
	DeleteLog(context.Context, *FamilyIncomeLogRequest, *FamilyIncomeResponse) error
	//导出家庭收入信息
	Export(context.Context, *FamilyIncomeRequest, *FamilyIncomeResponse) error
}

func RegisterFamilyIncomeServiceHandler(s server.Server, hdlr FamilyIncomeServiceHandler, opts ...server.HandlerOption) error {
	type familyIncomeService interface {
		Create(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error
		Update(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error
		Delete(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error
		Get(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error
		Detail(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error
		Search(ctx context.Context, in *FamilyIncomeRequest, out *FamilyIncomeResponse) error
		CreateLog(ctx context.Context, in *FamilyIncomeLogRequest, out *FamilyIncomeResponse) error
		UpdateLog(ctx context.Context, in *FamilyIncomeLogRequest, out *FamilyIncomeResponse) error
		DeleteLog(ctx context.Context, in *FamilyIncomeLogRequest, out *FamilyIncomeResponse) error
		Export(ctx context.Context, in *FamilyIncomeRequest, out *FamilyIncomeResponse) error
	}
	type FamilyIncomeService struct {
		familyIncomeService
	}
	h := &familyIncomeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FamilyIncomeService{h}, opts...))
}

type familyIncomeServiceHandler struct {
	FamilyIncomeServiceHandler
}

func (h *familyIncomeServiceHandler) Create(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.Create(ctx, in, out)
}

func (h *familyIncomeServiceHandler) Update(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.Update(ctx, in, out)
}

func (h *familyIncomeServiceHandler) Delete(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.Delete(ctx, in, out)
}

func (h *familyIncomeServiceHandler) Get(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.Get(ctx, in, out)
}

func (h *familyIncomeServiceHandler) Detail(ctx context.Context, in *FamilyIncome, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.Detail(ctx, in, out)
}

func (h *familyIncomeServiceHandler) Search(ctx context.Context, in *FamilyIncomeRequest, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.Search(ctx, in, out)
}

func (h *familyIncomeServiceHandler) CreateLog(ctx context.Context, in *FamilyIncomeLogRequest, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.CreateLog(ctx, in, out)
}

func (h *familyIncomeServiceHandler) UpdateLog(ctx context.Context, in *FamilyIncomeLogRequest, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.UpdateLog(ctx, in, out)
}

func (h *familyIncomeServiceHandler) DeleteLog(ctx context.Context, in *FamilyIncomeLogRequest, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.DeleteLog(ctx, in, out)
}

func (h *familyIncomeServiceHandler) Export(ctx context.Context, in *FamilyIncomeRequest, out *FamilyIncomeResponse) error {
	return h.FamilyIncomeServiceHandler.Export(ctx, in, out)
}
