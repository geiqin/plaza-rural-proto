// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: familyService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FamilyService service

func NewFamilyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FamilyService service

type FamilyService interface {
	//创建家庭信息
	Create(ctx context.Context, in *Family, opts ...client.CallOption) (*FamilyResponse, error)
	// 编辑家庭信息
	Update(ctx context.Context, in *Family, opts ...client.CallOption) (*FamilyResponse, error)
	// 删除家庭信息
	Delete(ctx context.Context, in *Family, opts ...client.CallOption) (*FamilyResponse, error)
	// 获取家庭信息详情
	Get(ctx context.Context, in *Family, opts ...client.CallOption) (*FamilyResponse, error)
	//分页查询家庭列表
	Search(ctx context.Context, in *FamilyRequest, opts ...client.CallOption) (*FamilyResponse, error)
	//获取家庭列表
	List(ctx context.Context, in *FamilyRequest, opts ...client.CallOption) (*FamilyResponse, error)
}

type familyService struct {
	c    client.Client
	name string
}

func NewFamilyService(name string, c client.Client) FamilyService {
	return &familyService{
		c:    c,
		name: name,
	}
}

func (c *familyService) Create(ctx context.Context, in *Family, opts ...client.CallOption) (*FamilyResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyService.Create", in)
	out := new(FamilyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyService) Update(ctx context.Context, in *Family, opts ...client.CallOption) (*FamilyResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyService.Update", in)
	out := new(FamilyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyService) Delete(ctx context.Context, in *Family, opts ...client.CallOption) (*FamilyResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyService.Delete", in)
	out := new(FamilyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyService) Get(ctx context.Context, in *Family, opts ...client.CallOption) (*FamilyResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyService.Get", in)
	out := new(FamilyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyService) Search(ctx context.Context, in *FamilyRequest, opts ...client.CallOption) (*FamilyResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyService.Search", in)
	out := new(FamilyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyService) List(ctx context.Context, in *FamilyRequest, opts ...client.CallOption) (*FamilyResponse, error) {
	req := c.c.NewRequest(c.name, "FamilyService.List", in)
	out := new(FamilyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FamilyService service

type FamilyServiceHandler interface {
	//创建家庭信息
	Create(context.Context, *Family, *FamilyResponse) error
	// 编辑家庭信息
	Update(context.Context, *Family, *FamilyResponse) error
	// 删除家庭信息
	Delete(context.Context, *Family, *FamilyResponse) error
	// 获取家庭信息详情
	Get(context.Context, *Family, *FamilyResponse) error
	//分页查询家庭列表
	Search(context.Context, *FamilyRequest, *FamilyResponse) error
	//获取家庭列表
	List(context.Context, *FamilyRequest, *FamilyResponse) error
}

func RegisterFamilyServiceHandler(s server.Server, hdlr FamilyServiceHandler, opts ...server.HandlerOption) error {
	type familyService interface {
		Create(ctx context.Context, in *Family, out *FamilyResponse) error
		Update(ctx context.Context, in *Family, out *FamilyResponse) error
		Delete(ctx context.Context, in *Family, out *FamilyResponse) error
		Get(ctx context.Context, in *Family, out *FamilyResponse) error
		Search(ctx context.Context, in *FamilyRequest, out *FamilyResponse) error
		List(ctx context.Context, in *FamilyRequest, out *FamilyResponse) error
	}
	type FamilyService struct {
		familyService
	}
	h := &familyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FamilyService{h}, opts...))
}

type familyServiceHandler struct {
	FamilyServiceHandler
}

func (h *familyServiceHandler) Create(ctx context.Context, in *Family, out *FamilyResponse) error {
	return h.FamilyServiceHandler.Create(ctx, in, out)
}

func (h *familyServiceHandler) Update(ctx context.Context, in *Family, out *FamilyResponse) error {
	return h.FamilyServiceHandler.Update(ctx, in, out)
}

func (h *familyServiceHandler) Delete(ctx context.Context, in *Family, out *FamilyResponse) error {
	return h.FamilyServiceHandler.Delete(ctx, in, out)
}

func (h *familyServiceHandler) Get(ctx context.Context, in *Family, out *FamilyResponse) error {
	return h.FamilyServiceHandler.Get(ctx, in, out)
}

func (h *familyServiceHandler) Search(ctx context.Context, in *FamilyRequest, out *FamilyResponse) error {
	return h.FamilyServiceHandler.Search(ctx, in, out)
}

func (h *familyServiceHandler) List(ctx context.Context, in *FamilyRequest, out *FamilyResponse) error {
	return h.FamilyServiceHandler.List(ctx, in, out)
}
