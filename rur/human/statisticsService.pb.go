// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: statisticsService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//家庭收入情况统计
type HouseholdIncomeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                          //ID
	Name                  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`                                                                       //街道ID
	FamilyCount           int32   `protobuf:"varint,3,opt,name=family_count,json=familyCount,proto3" json:"family_count"`                                     //总户数
	PersonCount           int32   `protobuf:"varint,4,opt,name=person_count,json=personCount,proto3" json:"person_count"`                                     //总人数
	PerNetIncome          float32 `protobuf:"fixed32,5,opt,name=per_net_income,json=perNetIncome,proto3" json:"per_net_income"`                               //人均纯收入
	PerAnnualIncome       float32 `protobuf:"fixed32,6,opt,name=per_annual_income,json=perAnnualIncome,proto3" json:"per_annual_income"`                      //人均年收入
	PerWorkIncome         float32 `protobuf:"fixed32,7,opt,name=per_work_income,json=perWorkIncome,proto3" json:"per_work_income"`                            //人均工资性收入
	PerWorkIncomeRate     float32 `protobuf:"fixed32,8,opt,name=per_work_income_rate,json=perWorkIncomeRate,proto3" json:"per_work_income_rate"`              //人均工资性收入占比
	PerBusinessIncome     float32 `protobuf:"fixed32,9,opt,name=per_business_income,json=perBusinessIncome,proto3" json:"per_business_income"`                //人均生产经营性净收入
	PerBusinessIncomeRate float32 `protobuf:"fixed32,10,opt,name=per_business_income_rate,json=perBusinessIncomeRate,proto3" json:"per_business_income_rate"` //人均生产经营性净收入及占比
	PerTransferIncome     float32 `protobuf:"fixed32,11,opt,name=per_transfer_income,json=perTransferIncome,proto3" json:"per_transfer_income"`               //人均转移性收入
	PerTransferIncomeRate float32 `protobuf:"fixed32,12,opt,name=per_transfer_income_rate,json=perTransferIncomeRate,proto3" json:"per_transfer_income_rate"` //人均转移性收入占比
	PerAssetIncome        float32 `protobuf:"fixed32,13,opt,name=per_asset_income,json=perAssetIncome,proto3" json:"per_asset_income"`                        //人均财产性收入
	PerAssetIncomeRate    float32 `protobuf:"fixed32,14,opt,name=per_asset_income_rate,json=perAssetIncomeRate,proto3" json:"per_asset_income_rate"`          //人均财产性收入占比
	PerBusinessCost       float32 `protobuf:"fixed32,15,opt,name=per_business_cost,json=perBusinessCost,proto3" json:"per_business_cost"`                     //人均生产经营性支出
}

func (x *HouseholdIncomeStats) Reset() {
	*x = HouseholdIncomeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statisticsService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HouseholdIncomeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdIncomeStats) ProtoMessage() {}

func (x *HouseholdIncomeStats) ProtoReflect() protoreflect.Message {
	mi := &file_statisticsService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdIncomeStats.ProtoReflect.Descriptor instead.
func (*HouseholdIncomeStats) Descriptor() ([]byte, []int) {
	return file_statisticsService_proto_rawDescGZIP(), []int{0}
}

func (x *HouseholdIncomeStats) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HouseholdIncomeStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HouseholdIncomeStats) GetFamilyCount() int32 {
	if x != nil {
		return x.FamilyCount
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPersonCount() int32 {
	if x != nil {
		return x.PersonCount
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerNetIncome() float32 {
	if x != nil {
		return x.PerNetIncome
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerAnnualIncome() float32 {
	if x != nil {
		return x.PerAnnualIncome
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerWorkIncome() float32 {
	if x != nil {
		return x.PerWorkIncome
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerWorkIncomeRate() float32 {
	if x != nil {
		return x.PerWorkIncomeRate
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerBusinessIncome() float32 {
	if x != nil {
		return x.PerBusinessIncome
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerBusinessIncomeRate() float32 {
	if x != nil {
		return x.PerBusinessIncomeRate
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerTransferIncome() float32 {
	if x != nil {
		return x.PerTransferIncome
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerTransferIncomeRate() float32 {
	if x != nil {
		return x.PerTransferIncomeRate
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerAssetIncome() float32 {
	if x != nil {
		return x.PerAssetIncome
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerAssetIncomeRate() float32 {
	if x != nil {
		return x.PerAssetIncomeRate
	}
	return 0
}

func (x *HouseholdIncomeStats) GetPerBusinessCost() float32 {
	if x != nil {
		return x.PerBusinessCost
	}
	return 0
}

type SectionIncomeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                            //ID
	Name          string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`                                         //街道ID
	FamilyCount   int32   `protobuf:"varint,3,opt,name=family_count,json=familyCount,proto3" json:"family_count"`       //总户数
	PersonCount   int32   `protobuf:"varint,4,opt,name=person_count,json=personCount,proto3" json:"person_count"`       //总人数
	PerNetIncome  float32 `protobuf:"fixed32,5,opt,name=per_net_income,json=perNetIncome,proto3" json:"per_net_income"` //人均纯收入
	SectionNum_1  int32   `protobuf:"varint,6,opt,name=section_num_1,json=sectionNum1,proto3" json:"section_num_1"`     // 5292元以下
	SectionNum_2  int32   `protobuf:"varint,7,opt,name=section_num_2,json=sectionNum2,proto3" json:"section_num_2"`     //5292-6700元
	SectionNum_3  int32   `protobuf:"varint,8,opt,name=section_num_3,json=sectionNum3,proto3" json:"section_num_3"`     // 6700-7600元
	SectionNum_4  int32   `protobuf:"varint,9,opt,name=section_num_4,json=sectionNum4,proto3" json:"section_num_4"`     // 7600-8700元
	SectionNum_5  int32   `protobuf:"varint,10,opt,name=section_num_5,json=sectionNum5,proto3" json:"section_num_5"`    // 8700-10000元
	SectionNum_6  int32   `protobuf:"varint,11,opt,name=section_num_6,json=sectionNum6,proto3" json:"section_num_6"`    // 10000-20000元
	SectionNum_7  int32   `protobuf:"varint,12,opt,name=section_num_7,json=sectionNum7,proto3" json:"section_num_7"`    // 20000-30000元
	SectionNum_8  int32   `protobuf:"varint,13,opt,name=section_num_8,json=sectionNum8,proto3" json:"section_num_8"`    // 30000-40000元
	SectionNum_9  int32   `protobuf:"varint,14,opt,name=section_num_9,json=sectionNum9,proto3" json:"section_num_9"`    //40000 - 50000元
	SectionNum_10 int32   `protobuf:"varint,15,opt,name=section_num_10,json=sectionNum10,proto3" json:"section_num_10"` //50000元及以上
}

func (x *SectionIncomeStats) Reset() {
	*x = SectionIncomeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statisticsService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionIncomeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionIncomeStats) ProtoMessage() {}

func (x *SectionIncomeStats) ProtoReflect() protoreflect.Message {
	mi := &file_statisticsService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionIncomeStats.ProtoReflect.Descriptor instead.
func (*SectionIncomeStats) Descriptor() ([]byte, []int) {
	return file_statisticsService_proto_rawDescGZIP(), []int{1}
}

func (x *SectionIncomeStats) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SectionIncomeStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SectionIncomeStats) GetFamilyCount() int32 {
	if x != nil {
		return x.FamilyCount
	}
	return 0
}

func (x *SectionIncomeStats) GetPersonCount() int32 {
	if x != nil {
		return x.PersonCount
	}
	return 0
}

func (x *SectionIncomeStats) GetPerNetIncome() float32 {
	if x != nil {
		return x.PerNetIncome
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_1() int32 {
	if x != nil {
		return x.SectionNum_1
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_2() int32 {
	if x != nil {
		return x.SectionNum_2
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_3() int32 {
	if x != nil {
		return x.SectionNum_3
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_4() int32 {
	if x != nil {
		return x.SectionNum_4
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_5() int32 {
	if x != nil {
		return x.SectionNum_5
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_6() int32 {
	if x != nil {
		return x.SectionNum_6
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_7() int32 {
	if x != nil {
		return x.SectionNum_7
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_8() int32 {
	if x != nil {
		return x.SectionNum_8
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_9() int32 {
	if x != nil {
		return x.SectionNum_9
	}
	return 0
}

func (x *SectionIncomeStats) GetSectionNum_10() int32 {
	if x != nil {
		return x.SectionNum_10
	}
	return 0
}

//户收支情况统计表
type PerFamilyExpenseStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                            //ID
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`                                                         //街道ID
	FamilyCount       int32   `protobuf:"varint,3,opt,name=family_count,json=familyCount,proto3" json:"family_count"`                       //总户数
	PersonCount       int32   `protobuf:"varint,4,opt,name=person_count,json=personCount,proto3" json:"person_count"`                       //总人数
	PerNetIncome      float32 `protobuf:"fixed32,5,opt,name=per_net_income,json=perNetIncome,proto3" json:"per_net_income"`                 //户均纯收入
	PerWorkIncome     float32 `protobuf:"fixed32,7,opt,name=per_work_income,json=perWorkIncome,proto3" json:"per_work_income"`              //户均工资性收入
	PerTransferIncome float32 `protobuf:"fixed32,8,opt,name=per_transfer_income,json=perTransferIncome,proto3" json:"per_transfer_income"`  //户均转移性收入
	PerAssetIncome    float32 `protobuf:"fixed32,9,opt,name=per_asset_income,json=perAssetIncome,proto3" json:"per_asset_income"`           //户均财产性收入
	PerBusinessIncome float32 `protobuf:"fixed32,10,opt,name=per_business_income,json=perBusinessIncome,proto3" json:"per_business_income"` //户均生产经营性净收入
	PerBusinessCost   float32 `protobuf:"fixed32,11,opt,name=per_business_cost,json=perBusinessCost,proto3" json:"per_business_cost"`       //户均生产经营性支出
}

func (x *PerFamilyExpenseStats) Reset() {
	*x = PerFamilyExpenseStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statisticsService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerFamilyExpenseStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerFamilyExpenseStats) ProtoMessage() {}

func (x *PerFamilyExpenseStats) ProtoReflect() protoreflect.Message {
	mi := &file_statisticsService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerFamilyExpenseStats.ProtoReflect.Descriptor instead.
func (*PerFamilyExpenseStats) Descriptor() ([]byte, []int) {
	return file_statisticsService_proto_rawDescGZIP(), []int{2}
}

func (x *PerFamilyExpenseStats) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PerFamilyExpenseStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerFamilyExpenseStats) GetFamilyCount() int32 {
	if x != nil {
		return x.FamilyCount
	}
	return 0
}

func (x *PerFamilyExpenseStats) GetPersonCount() int32 {
	if x != nil {
		return x.PersonCount
	}
	return 0
}

func (x *PerFamilyExpenseStats) GetPerNetIncome() float32 {
	if x != nil {
		return x.PerNetIncome
	}
	return 0
}

func (x *PerFamilyExpenseStats) GetPerWorkIncome() float32 {
	if x != nil {
		return x.PerWorkIncome
	}
	return 0
}

func (x *PerFamilyExpenseStats) GetPerTransferIncome() float32 {
	if x != nil {
		return x.PerTransferIncome
	}
	return 0
}

func (x *PerFamilyExpenseStats) GetPerAssetIncome() float32 {
	if x != nil {
		return x.PerAssetIncome
	}
	return 0
}

func (x *PerFamilyExpenseStats) GetPerBusinessIncome() float32 {
	if x != nil {
		return x.PerBusinessIncome
	}
	return 0
}

func (x *PerFamilyExpenseStats) GetPerBusinessCost() float32 {
	if x != nil {
		return x.PerBusinessCost
	}
	return 0
}

//转移性收入情况统计
type TransferIncomeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                             //ID
	Name                   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`                                                                          //name
	TransferIncomeNum      int32   `protobuf:"varint,3,opt,name=transfer_income_num,json=transferIncomeNum,proto3" json:"transfer_income_num"`                    //转移性收入户数
	PerTransferIncome      float32 `protobuf:"fixed32,4,opt,name=per_transfer_income,json=perTransferIncome,proto3" json:"per_transfer_income"`                   //户均转移性收入
	LowIncomeNum           int64   `protobuf:"varint,5,opt,name=low_income_num,json=lowIncomeNum,proto3" json:"low_income_num"`                                   //低保户数
	PerLowIncome           float32 `protobuf:"fixed32,6,opt,name=per_low_income,json=perLowIncome,proto3" json:"per_low_income"`                                  //户均低保金
	SpecialFundsNum        int64   `protobuf:"varint,7,opt,name=special_funds_num,json=specialFundsNum,proto3" json:"special_funds_num"`                          //特困供养金户数
	PerSpecialFunds        float32 `protobuf:"fixed32,8,opt,name=per_special_funds,json=perSpecialFunds,proto3" json:"per_special_funds"`                         //户均特困供养金
	EcologicalFundsNum     int64   `protobuf:"varint,9,opt,name=ecological_funds_num,json=ecologicalFundsNum,proto3" json:"ecological_funds_num"`                 //生态补偿金户数
	PerEcologicalFunds     float32 `protobuf:"fixed32,10,opt,name=per_ecological_funds,json=perEcologicalFunds,proto3" json:"per_ecological_funds"`               //户均生态补偿金
	ElderlyFundsNum        int64   `protobuf:"varint,11,opt,name=elderly_funds_num,json=elderlyFundsNum,proto3" json:"elderly_funds_num"`                         //养老保险金户数
	PerElderlyFunds        float32 `protobuf:"fixed32,12,opt,name=per_elderly_funds,json=perElderlyFunds,proto3" json:"per_elderly_funds"`                        //户均养老保险金
	BirthFundsNum          int64   `protobuf:"varint,13,opt,name=birth_funds_num,json=birthFundsNum,proto3" json:"birth_funds_num"`                               //计划生育金户数
	PerBirthFunds          float32 `protobuf:"fixed32,14,opt,name=per_birth_funds,json=perBirthFunds,proto3" json:"per_birth_funds"`                              //户均计划生育金
	OtherTransferIncomeNum int64   `protobuf:"varint,15,opt,name=other_transfer_income_num,json=otherTransferIncomeNum,proto3" json:"other_transfer_income_num"`  //其他转移性收入户数
	PerOtherTransferIncome float32 `protobuf:"fixed32,16,opt,name=per_other_transfer_income,json=perOtherTransferIncome,proto3" json:"per_other_transfer_income"` //户均其他转移性收入
}

func (x *TransferIncomeStats) Reset() {
	*x = TransferIncomeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statisticsService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferIncomeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferIncomeStats) ProtoMessage() {}

func (x *TransferIncomeStats) ProtoReflect() protoreflect.Message {
	mi := &file_statisticsService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferIncomeStats.ProtoReflect.Descriptor instead.
func (*TransferIncomeStats) Descriptor() ([]byte, []int) {
	return file_statisticsService_proto_rawDescGZIP(), []int{3}
}

func (x *TransferIncomeStats) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransferIncomeStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransferIncomeStats) GetTransferIncomeNum() int32 {
	if x != nil {
		return x.TransferIncomeNum
	}
	return 0
}

func (x *TransferIncomeStats) GetPerTransferIncome() float32 {
	if x != nil {
		return x.PerTransferIncome
	}
	return 0
}

func (x *TransferIncomeStats) GetLowIncomeNum() int64 {
	if x != nil {
		return x.LowIncomeNum
	}
	return 0
}

func (x *TransferIncomeStats) GetPerLowIncome() float32 {
	if x != nil {
		return x.PerLowIncome
	}
	return 0
}

func (x *TransferIncomeStats) GetSpecialFundsNum() int64 {
	if x != nil {
		return x.SpecialFundsNum
	}
	return 0
}

func (x *TransferIncomeStats) GetPerSpecialFunds() float32 {
	if x != nil {
		return x.PerSpecialFunds
	}
	return 0
}

func (x *TransferIncomeStats) GetEcologicalFundsNum() int64 {
	if x != nil {
		return x.EcologicalFundsNum
	}
	return 0
}

func (x *TransferIncomeStats) GetPerEcologicalFunds() float32 {
	if x != nil {
		return x.PerEcologicalFunds
	}
	return 0
}

func (x *TransferIncomeStats) GetElderlyFundsNum() int64 {
	if x != nil {
		return x.ElderlyFundsNum
	}
	return 0
}

func (x *TransferIncomeStats) GetPerElderlyFunds() float32 {
	if x != nil {
		return x.PerElderlyFunds
	}
	return 0
}

func (x *TransferIncomeStats) GetBirthFundsNum() int64 {
	if x != nil {
		return x.BirthFundsNum
	}
	return 0
}

func (x *TransferIncomeStats) GetPerBirthFunds() float32 {
	if x != nil {
		return x.PerBirthFunds
	}
	return 0
}

func (x *TransferIncomeStats) GetOtherTransferIncomeNum() int64 {
	if x != nil {
		return x.OtherTransferIncomeNum
	}
	return 0
}

func (x *TransferIncomeStats) GetPerOtherTransferIncome() float32 {
	if x != nil {
		return x.PerOtherTransferIncome
	}
	return 0
}

type StatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged    int64  `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Sorting  string `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting"`
	//----
	Id         int64   `protobuf:"varint,4,opt,name=id,proto3" json:"id"`
	CountyCode int64   `protobuf:"varint,5,opt,name=county_code,json=countyCode,proto3" json:"county_code"`
	TownCode   int64   `protobuf:"varint,6,opt,name=town_code,json=townCode,proto3" json:"town_code"`
	Ids        []int64 `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
}

func (x *StatisticsRequest) Reset() {
	*x = StatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statisticsService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsRequest) ProtoMessage() {}

func (x *StatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statisticsService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsRequest.ProtoReflect.Descriptor instead.
func (*StatisticsRequest) Descriptor() ([]byte, []int) {
	return file_statisticsService_proto_rawDescGZIP(), []int{4}
}

func (x *StatisticsRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *StatisticsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *StatisticsRequest) GetSorting() string {
	if x != nil {
		return x.Sorting
	}
	return ""
}

func (x *StatisticsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatisticsRequest) GetCountyCode() int64 {
	if x != nil {
		return x.CountyCode
	}
	return 0
}

func (x *StatisticsRequest) GetTownCode() int64 {
	if x != nil {
		return x.TownCode
	}
	return 0
}

func (x *StatisticsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type StatisticsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HouseholdIncomes  []*HouseholdIncomeStats  `protobuf:"bytes,1,rep,name=HouseholdIncomes,proto3" json:"HouseholdIncomes"`
	SectionIncomes    []*SectionIncomeStats    `protobuf:"bytes,2,rep,name=SectionIncomes,proto3" json:"SectionIncomes"`
	PerFamilyExpenses []*PerFamilyExpenseStats `protobuf:"bytes,3,rep,name=PerFamilyExpenses,proto3" json:"PerFamilyExpenses"`
	TransferIncomes   []*TransferIncomeStats   `protobuf:"bytes,4,rep,name=TransferIncomes,proto3" json:"TransferIncomes"`
	Info              *common.Info             `protobuf:"bytes,5,opt,name=info,proto3" json:"info"`
}

func (x *StatisticsData) Reset() {
	*x = StatisticsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statisticsService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsData) ProtoMessage() {}

func (x *StatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_statisticsService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsData.ProtoReflect.Descriptor instead.
func (*StatisticsData) Descriptor() ([]byte, []int) {
	return file_statisticsService_proto_rawDescGZIP(), []int{5}
}

func (x *StatisticsData) GetHouseholdIncomes() []*HouseholdIncomeStats {
	if x != nil {
		return x.HouseholdIncomes
	}
	return nil
}

func (x *StatisticsData) GetSectionIncomes() []*SectionIncomeStats {
	if x != nil {
		return x.SectionIncomes
	}
	return nil
}

func (x *StatisticsData) GetPerFamilyExpenses() []*PerFamilyExpenseStats {
	if x != nil {
		return x.PerFamilyExpenses
	}
	return nil
}

func (x *StatisticsData) GetTransferIncomes() []*TransferIncomeStats {
	if x != nil {
		return x.TransferIncomes
	}
	return nil
}

func (x *StatisticsData) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type StatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *StatisticsData `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Error *common.Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
}

func (x *StatisticsResponse) Reset() {
	*x = StatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statisticsService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsResponse) ProtoMessage() {}

func (x *StatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statisticsService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsResponse.ProtoReflect.Descriptor instead.
func (*StatisticsResponse) Descriptor() ([]byte, []int) {
	return file_statisticsService_proto_rawDescGZIP(), []int{6}
}

func (x *StatisticsResponse) GetData() *StatisticsData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StatisticsResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_statisticsService_proto protoreflect.FileDescriptor

var file_statisticsService_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x05, 0x0a, 0x14, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x41,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x70, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x70, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x70, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x15, 0x70, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x70, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x12, 0x70, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x70, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x22,
	0x8e, 0x04, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x32, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x33, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x33, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x34, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x35, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x36, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x36, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x37, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x37, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x38, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x38, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x39, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x39, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x31, 0x30, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x31, 0x30,
	0x22, 0x85, 0x03, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x70, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x65, 0x72, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xbf, 0x05, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x70, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x63, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65,
	0x72, 0x5f, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x65, 0x72, 0x45, 0x63, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x65, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x5f,
	0x65, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x39, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x16, 0x70, 0x65, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xdc, 0x02,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4a, 0x0a, 0x10, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x11,
	0x50, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x47, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xd1, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x50, 0x65, 0x72,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_statisticsService_proto_rawDescOnce sync.Once
	file_statisticsService_proto_rawDescData = file_statisticsService_proto_rawDesc
)

func file_statisticsService_proto_rawDescGZIP() []byte {
	file_statisticsService_proto_rawDescOnce.Do(func() {
		file_statisticsService_proto_rawDescData = protoimpl.X.CompressGZIP(file_statisticsService_proto_rawDescData)
	})
	return file_statisticsService_proto_rawDescData
}

var file_statisticsService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_statisticsService_proto_goTypes = []interface{}{
	(*HouseholdIncomeStats)(nil),  // 0: services.HouseholdIncomeStats
	(*SectionIncomeStats)(nil),    // 1: services.SectionIncomeStats
	(*PerFamilyExpenseStats)(nil), // 2: services.PerFamilyExpenseStats
	(*TransferIncomeStats)(nil),   // 3: services.TransferIncomeStats
	(*StatisticsRequest)(nil),     // 4: services.StatisticsRequest
	(*StatisticsData)(nil),        // 5: services.StatisticsData
	(*StatisticsResponse)(nil),    // 6: services.StatisticsResponse
	(*common.Info)(nil),           // 7: common.Info
	(*common.Error)(nil),          // 8: common.Error
}
var file_statisticsService_proto_depIdxs = []int32{
	0,  // 0: services.StatisticsData.HouseholdIncomes:type_name -> services.HouseholdIncomeStats
	1,  // 1: services.StatisticsData.SectionIncomes:type_name -> services.SectionIncomeStats
	2,  // 2: services.StatisticsData.PerFamilyExpenses:type_name -> services.PerFamilyExpenseStats
	3,  // 3: services.StatisticsData.TransferIncomes:type_name -> services.TransferIncomeStats
	7,  // 4: services.StatisticsData.info:type_name -> common.Info
	5,  // 5: services.StatisticsResponse.data:type_name -> services.StatisticsData
	8,  // 6: services.StatisticsResponse.error:type_name -> common.Error
	4,  // 7: services.StatisticsService.HouseholdIncome:input_type -> services.StatisticsRequest
	4,  // 8: services.StatisticsService.SectionIncome:input_type -> services.StatisticsRequest
	4,  // 9: services.StatisticsService.PerFamilyExpense:input_type -> services.StatisticsRequest
	4,  // 10: services.StatisticsService.TransferIncome:input_type -> services.StatisticsRequest
	6,  // 11: services.StatisticsService.HouseholdIncome:output_type -> services.StatisticsResponse
	6,  // 12: services.StatisticsService.SectionIncome:output_type -> services.StatisticsResponse
	6,  // 13: services.StatisticsService.PerFamilyExpense:output_type -> services.StatisticsResponse
	6,  // 14: services.StatisticsService.TransferIncome:output_type -> services.StatisticsResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_statisticsService_proto_init() }
func file_statisticsService_proto_init() {
	if File_statisticsService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_statisticsService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HouseholdIncomeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statisticsService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectionIncomeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statisticsService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerFamilyExpenseStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statisticsService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferIncomeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statisticsService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statisticsService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statisticsService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_statisticsService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_statisticsService_proto_goTypes,
		DependencyIndexes: file_statisticsService_proto_depIdxs,
		MessageInfos:      file_statisticsService_proto_msgTypes,
	}.Build()
	File_statisticsService_proto = out.File
	file_statisticsService_proto_rawDesc = nil
	file_statisticsService_proto_goTypes = nil
	file_statisticsService_proto_depIdxs = nil
}
