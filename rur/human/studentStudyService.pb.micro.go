// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: studentStudyService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for StudentStudyService service

func NewStudentStudyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StudentStudyService service

type StudentStudyService interface {
	//创建学生在校情况
	Create(ctx context.Context, in *StudentStudy, opts ...client.CallOption) (*StudentStudyResponse, error)
	//编辑学生在校情况
	Update(ctx context.Context, in *StudentStudy, opts ...client.CallOption) (*StudentStudyResponse, error)
	//删除学生在校情况
	Delete(ctx context.Context, in *StudentStudy, opts ...client.CallOption) (*StudentStudyResponse, error)
	//获取学生在校情况详情
	Get(ctx context.Context, in *StudentStudy, opts ...client.CallOption) (*StudentStudyResponse, error)
	//查询学生在校情况
	Search(ctx context.Context, in *StudentStudyRequest, opts ...client.CallOption) (*StudentStudyResponse, error)
	//导出学生在校情况
	Export(ctx context.Context, in *StudentStudyRequest, opts ...client.CallOption) (*StudentStudyResponse, error)
}

type studentStudyService struct {
	c    client.Client
	name string
}

func NewStudentStudyService(name string, c client.Client) StudentStudyService {
	return &studentStudyService{
		c:    c,
		name: name,
	}
}

func (c *studentStudyService) Create(ctx context.Context, in *StudentStudy, opts ...client.CallOption) (*StudentStudyResponse, error) {
	req := c.c.NewRequest(c.name, "StudentStudyService.Create", in)
	out := new(StudentStudyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentStudyService) Update(ctx context.Context, in *StudentStudy, opts ...client.CallOption) (*StudentStudyResponse, error) {
	req := c.c.NewRequest(c.name, "StudentStudyService.Update", in)
	out := new(StudentStudyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentStudyService) Delete(ctx context.Context, in *StudentStudy, opts ...client.CallOption) (*StudentStudyResponse, error) {
	req := c.c.NewRequest(c.name, "StudentStudyService.Delete", in)
	out := new(StudentStudyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentStudyService) Get(ctx context.Context, in *StudentStudy, opts ...client.CallOption) (*StudentStudyResponse, error) {
	req := c.c.NewRequest(c.name, "StudentStudyService.Get", in)
	out := new(StudentStudyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentStudyService) Search(ctx context.Context, in *StudentStudyRequest, opts ...client.CallOption) (*StudentStudyResponse, error) {
	req := c.c.NewRequest(c.name, "StudentStudyService.Search", in)
	out := new(StudentStudyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentStudyService) Export(ctx context.Context, in *StudentStudyRequest, opts ...client.CallOption) (*StudentStudyResponse, error) {
	req := c.c.NewRequest(c.name, "StudentStudyService.Export", in)
	out := new(StudentStudyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StudentStudyService service

type StudentStudyServiceHandler interface {
	//创建学生在校情况
	Create(context.Context, *StudentStudy, *StudentStudyResponse) error
	//编辑学生在校情况
	Update(context.Context, *StudentStudy, *StudentStudyResponse) error
	//删除学生在校情况
	Delete(context.Context, *StudentStudy, *StudentStudyResponse) error
	//获取学生在校情况详情
	Get(context.Context, *StudentStudy, *StudentStudyResponse) error
	//查询学生在校情况
	Search(context.Context, *StudentStudyRequest, *StudentStudyResponse) error
	//导出学生在校情况
	Export(context.Context, *StudentStudyRequest, *StudentStudyResponse) error
}

func RegisterStudentStudyServiceHandler(s server.Server, hdlr StudentStudyServiceHandler, opts ...server.HandlerOption) error {
	type studentStudyService interface {
		Create(ctx context.Context, in *StudentStudy, out *StudentStudyResponse) error
		Update(ctx context.Context, in *StudentStudy, out *StudentStudyResponse) error
		Delete(ctx context.Context, in *StudentStudy, out *StudentStudyResponse) error
		Get(ctx context.Context, in *StudentStudy, out *StudentStudyResponse) error
		Search(ctx context.Context, in *StudentStudyRequest, out *StudentStudyResponse) error
		Export(ctx context.Context, in *StudentStudyRequest, out *StudentStudyResponse) error
	}
	type StudentStudyService struct {
		studentStudyService
	}
	h := &studentStudyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StudentStudyService{h}, opts...))
}

type studentStudyServiceHandler struct {
	StudentStudyServiceHandler
}

func (h *studentStudyServiceHandler) Create(ctx context.Context, in *StudentStudy, out *StudentStudyResponse) error {
	return h.StudentStudyServiceHandler.Create(ctx, in, out)
}

func (h *studentStudyServiceHandler) Update(ctx context.Context, in *StudentStudy, out *StudentStudyResponse) error {
	return h.StudentStudyServiceHandler.Update(ctx, in, out)
}

func (h *studentStudyServiceHandler) Delete(ctx context.Context, in *StudentStudy, out *StudentStudyResponse) error {
	return h.StudentStudyServiceHandler.Delete(ctx, in, out)
}

func (h *studentStudyServiceHandler) Get(ctx context.Context, in *StudentStudy, out *StudentStudyResponse) error {
	return h.StudentStudyServiceHandler.Get(ctx, in, out)
}

func (h *studentStudyServiceHandler) Search(ctx context.Context, in *StudentStudyRequest, out *StudentStudyResponse) error {
	return h.StudentStudyServiceHandler.Search(ctx, in, out)
}

func (h *studentStudyServiceHandler) Export(ctx context.Context, in *StudentStudyRequest, out *StudentStudyResponse) error {
	return h.StudentStudyServiceHandler.Export(ctx, in, out)
}
