// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: healthPolicyService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HealthPolicyService service

func NewHealthPolicyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HealthPolicyService service

type HealthPolicyService interface {
	//创建落实健康政策
	Create(ctx context.Context, in *HealthPolicy, opts ...client.CallOption) (*HealthPolicyResponse, error)
	// 编辑落实健康政策
	Update(ctx context.Context, in *HealthPolicy, opts ...client.CallOption) (*HealthPolicyResponse, error)
	// 删除落实健康政策
	Delete(ctx context.Context, in *HealthPolicy, opts ...client.CallOption) (*HealthPolicyResponse, error)
	// 获取落实健康政策详情
	Get(ctx context.Context, in *HealthPolicy, opts ...client.CallOption) (*HealthPolicyResponse, error)
	//分页查询落实健康政策列表
	Search(ctx context.Context, in *HealthPolicyRequest, opts ...client.CallOption) (*HealthPolicyResponse, error)
	//导出落实健康政策
	Export(ctx context.Context, in *HealthPolicyRequest, opts ...client.CallOption) (*HealthPolicyResponse, error)
}

type healthPolicyService struct {
	c    client.Client
	name string
}

func NewHealthPolicyService(name string, c client.Client) HealthPolicyService {
	return &healthPolicyService{
		c:    c,
		name: name,
	}
}

func (c *healthPolicyService) Create(ctx context.Context, in *HealthPolicy, opts ...client.CallOption) (*HealthPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "HealthPolicyService.Create", in)
	out := new(HealthPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthPolicyService) Update(ctx context.Context, in *HealthPolicy, opts ...client.CallOption) (*HealthPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "HealthPolicyService.Update", in)
	out := new(HealthPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthPolicyService) Delete(ctx context.Context, in *HealthPolicy, opts ...client.CallOption) (*HealthPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "HealthPolicyService.Delete", in)
	out := new(HealthPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthPolicyService) Get(ctx context.Context, in *HealthPolicy, opts ...client.CallOption) (*HealthPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "HealthPolicyService.Get", in)
	out := new(HealthPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthPolicyService) Search(ctx context.Context, in *HealthPolicyRequest, opts ...client.CallOption) (*HealthPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "HealthPolicyService.Search", in)
	out := new(HealthPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthPolicyService) Export(ctx context.Context, in *HealthPolicyRequest, opts ...client.CallOption) (*HealthPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "HealthPolicyService.Export", in)
	out := new(HealthPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HealthPolicyService service

type HealthPolicyServiceHandler interface {
	//创建落实健康政策
	Create(context.Context, *HealthPolicy, *HealthPolicyResponse) error
	// 编辑落实健康政策
	Update(context.Context, *HealthPolicy, *HealthPolicyResponse) error
	// 删除落实健康政策
	Delete(context.Context, *HealthPolicy, *HealthPolicyResponse) error
	// 获取落实健康政策详情
	Get(context.Context, *HealthPolicy, *HealthPolicyResponse) error
	//分页查询落实健康政策列表
	Search(context.Context, *HealthPolicyRequest, *HealthPolicyResponse) error
	//导出落实健康政策
	Export(context.Context, *HealthPolicyRequest, *HealthPolicyResponse) error
}

func RegisterHealthPolicyServiceHandler(s server.Server, hdlr HealthPolicyServiceHandler, opts ...server.HandlerOption) error {
	type healthPolicyService interface {
		Create(ctx context.Context, in *HealthPolicy, out *HealthPolicyResponse) error
		Update(ctx context.Context, in *HealthPolicy, out *HealthPolicyResponse) error
		Delete(ctx context.Context, in *HealthPolicy, out *HealthPolicyResponse) error
		Get(ctx context.Context, in *HealthPolicy, out *HealthPolicyResponse) error
		Search(ctx context.Context, in *HealthPolicyRequest, out *HealthPolicyResponse) error
		Export(ctx context.Context, in *HealthPolicyRequest, out *HealthPolicyResponse) error
	}
	type HealthPolicyService struct {
		healthPolicyService
	}
	h := &healthPolicyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HealthPolicyService{h}, opts...))
}

type healthPolicyServiceHandler struct {
	HealthPolicyServiceHandler
}

func (h *healthPolicyServiceHandler) Create(ctx context.Context, in *HealthPolicy, out *HealthPolicyResponse) error {
	return h.HealthPolicyServiceHandler.Create(ctx, in, out)
}

func (h *healthPolicyServiceHandler) Update(ctx context.Context, in *HealthPolicy, out *HealthPolicyResponse) error {
	return h.HealthPolicyServiceHandler.Update(ctx, in, out)
}

func (h *healthPolicyServiceHandler) Delete(ctx context.Context, in *HealthPolicy, out *HealthPolicyResponse) error {
	return h.HealthPolicyServiceHandler.Delete(ctx, in, out)
}

func (h *healthPolicyServiceHandler) Get(ctx context.Context, in *HealthPolicy, out *HealthPolicyResponse) error {
	return h.HealthPolicyServiceHandler.Get(ctx, in, out)
}

func (h *healthPolicyServiceHandler) Search(ctx context.Context, in *HealthPolicyRequest, out *HealthPolicyResponse) error {
	return h.HealthPolicyServiceHandler.Search(ctx, in, out)
}

func (h *healthPolicyServiceHandler) Export(ctx context.Context, in *HealthPolicyRequest, out *HealthPolicyResponse) error {
	return h.HealthPolicyServiceHandler.Export(ctx, in, out)
}
